#!/bin/bash
################################################# Version 14 ############################
## Author : Naeem Khan
## Mentor Graphics
## Script to list CVE to be patched from yocto latest release and cve-check-tool.Remove duplicates and check if Patches are already present in our MEL release.Finally, Check for patches which can be found in Yocto new release against CVE needed to be patched and genearte reports. 

FILE_STATUS=0
NORMAL_RELEASE_DIR="MelRelease"
POKY_RELEASE_DIR="PokyReleases"
RELEASES_DIR="Releases"
REPORTS_DIR="Reports"
LOGS_DIR="Logs"
CUMULATIVE_README_NAME="README-mel-cumulative.txt"
README_INDIVIDUAL_FIRST_HALF="------------------------------------------------------------------------------
MGC ISSUE ID
------------------------------------------------------------------------------

------------------------------------------------------------------------------
DESCRIPTION
------------------------------------------------------------------------------
Fixed:"
README_INDIVIDUAL_SECOND_HALF="------------------------------------------------------------------------------
RESOLUTION
------------------------------------------------------------------------------
Added CVE patch
------------------------------------------------------------------------------
DEPENDENCIES
------------------------------------------------------------------------------
None

------------------------------------------------------------------------------
LICENSE
------------------------------------------------------------------------------

------------------------------------------------------------------------------
TEST SUMMARY
------------------------------------------------------------------------------
The CVE fix patch applied and build completed successfully. 

------------------------------------------------------------------------------
KNOWN LIMITATIONS
------------------------------------------------------------------------------
None
"

echo -e "\n \t \t [ CVE Log Analyser ] \n \n "

if [ "$1" == "-h" ] || [ "$1" == "" ]; then
	echo -e "[ HELP ] \n"
	echo "<*>  -R : <update-mel-* folder> "
	echo -e "	Just provide name of folder to create ReadME files\n"	
	echo "<*>  -r : <Release Name Present in Current Working Directory> : "
	echo "	It shall search for CVE in provided directory name, " 
	echo -e "	should be placed in 'Releases' directory.\n"
	echo -e "<*>  -c : <Folder_Name_1> <Folder_Name_2> :"
	echo "	If two folder names are provide,It would be treated as   "
	echo "	if need to check for CVE Patches present in 'Folder_Name_2'  "
	echo "	but not in 'Folder_Name_1'.These two folders must be " 
	echo -e "	'PokyReleases' named directory.\n"
	echo "<*>  -a :	"  
	echo "	Just Analyse Current Mel Release.It shall look into the 'MelReleases' "
	echo "	directory for CVE Patches, listed in 'reported_cve.txt' and " 
	echo -e "	check for valid CVE using cve_check file info.\n"
	echo "<*>  -a html :	"  
	echo "	Just Analyse Current Mel Release.It shall look into the 'MelReleases' "
	echo "	directory for CVE Patches, listed in 'reported_cve.txt' and " 
	echo -e "	check for valid CVE using cve_*.html file info.\n"
	echo -e "<*>  -j : \n	Create report form CVE log \n"  
elif [ "$1" == "-j" ]; then
	if [ -d ./$LOGS_DIR ]; then
	    [ "$(ls -A ./$LOGS_DIR)" ] && rm ./$LOGS_DIR/* || echo "No Old Logs Found"
	else
	    mkdir ./$LOGS_DIR
	fi
	if [ -e cve_accumulated.log ]; then
		cp cve_accumulated.log $LOGS_DIR 	
	fi
	cd $LOGS_DIR	
	# Get all files with name isafw_cvelog | get lines with CVE- | remove pkg info: | sort | remove duplicate lines (if any) | Remove all Comma(s)
	cat cve_accumulated.log | grep CVE- | awk '{gsub("pkg info: ", "");print}' | sort | uniq | tr -s ',' ' ' > CVEFile.txt

	#Get one liner log in a varibale
	CVE_LOG=`cat CVEFile.txt`
	#Format the log 
	for word in $CVE_LOG; do
		if [[ ${word:0:1} == [[:lower:]] ]] ; then
			echo -n "$word " >> reported_cve.txt
		elif [[ ${word:0:1} == [:digit:] ]] ; then
			echo "$word"  >> reported_cve.txt
		else
			echo "$word"  >> reported_cve.txt
		fi
	done
	echo "CVE Information generated" 	
elif [ "$1" == "-R" ]; then
	echo -e "\n Do you really want to create README files for packages?"
	while read -n1 -r -p " choose [y]es|[n]o "; do
		case $REPLY in
			y) break;;
			n) echo " "; break;;
			*) echo "	What?";;
		esac
	done
	if [ $REPLY == "y" ]; then 
		echo -e "\n Creating README Files"
		if [ ! -e ./$LOGS_DIR/CveWithPackageName.txt ]; then 	## if this file is not present, create a new one for README-mel-cumulative
			PackageNameNumber=""			
			while read -r cve; do
			if ( echo "$cve" | grep -q ' ' ); then # if line contains spaces it means line has Package name and Version Number 
				PackageNameNumber="$(echo "$cve")"
			elif [ "$cve" == "0" ]; then
				cve=$cve ## dummy entry to satisfy elif
			else 
				echo -n "$PackageNameNumber" >> ./$LOGS_DIR/TmpCveWithPackageName.txt 
				echo -n ": " >> ./$LOGS_DIR/TmpCveWithPackageName.txt               
				echo "$cve" >> ./$LOGS_DIR/TmpCveWithPackageName.txt 	
			fi
			done < ./$LOGS_DIR/reported_cve.txt
			if [ -e ./$LOGS_DIR/TmpCveWithPackageName.txt ]; then
				sort ./$LOGS_DIR/TmpCveWithPackageName.txt | uniq > ./$LOGS_DIR/CveWithPackageName.txt
			fi 	
		fi
		ScriptDir=$(pwd) ## assuming script directory has all other directories needed for script	
		cd $(find ./ -name $2) 
		FileName="README."
		CurrentPackageName=""
		PreviousPackageName=""
		CurrentBSPName=""
		PreviousBSPName=""
		PreviousLine=""
		PreviousCVENumber=""
		CVENumber=""
		CVEString=""
		URLString="* https://nvd.nist.gov/vuln/detail/"
		ReadMe_Cumulative_String=""
		StringForCumulativeReadME=": See "
		recipe_directory="recipes-"
		# find all patches in update directory 
		find -name *.patch > PatchedPackagesInfo.txt
		## We need to append a dummy line at the end of file because in the following loop when a package is parsed; it is not written to file until another package is started to parse.
		## It creates a problem when last package is parsed, it is not written to the README file because a package info is not written to file until some other package is started to parse
		## SO by adding the dummy line, we do not need to replicate the code of while loop outside of it so keeo the code short and more understandable
		echo "./recipes-dummy/dummy/files/dummy-fix-CVE-0000-0000.patch" >> PatchedPackagesInfo.txt  	
		
		while read -r line; do
			CurrentPackageName="$(echo $line | awk -F-fix '{print $1}' | sed 's:.*/::')" ## get Package name
			CurrentBSPName="$(echo $line | awk -F[//] '{print $2}')" ## get the first word of line.It shall be either BSP folder name or "resipes-..." string
		## Now check if either package name or the BSP/recipes-* word differs, it means time to write info to the file because some new package is to be processed
			if [ "$CurrentPackageName" != "$PreviousPackageName" ] || [ "$CurrentBSPName" != "$PreviousBSPName" ]; then
				if [ ! -z "$CVEString" ]; then ## if that string is empty, it means we entered in the loop for the first time
					if echo "$PreviousBSPName" | grep -q "$recipe_directory" ## check either BSPName contains the BSP name or "recipe-" word
					then
						if echo "$PreviousBSPName" | grep -q "recipes-linux"
						then
							FileName=$FileName"kernel"
						else
							## if BspNAME string conatins the "recipes-" word then it means package is not specific to some BSP so write README.<packageName>
							FileName=$FileName$PreviousPackageName 
						fi
					else
						if echo "$PreviousLine" | cut -d'/' -f3 | grep -q "recipes-linux" ## extract the second field which shall occue after third "/" (./BSPNAME/recipes-linux)
						then							
							FileName=$FileName$PreviousBSPName"_kernel"						
						else						
							FileName=$FileName$PreviousBSPName"_"$PreviousPackageName ## if contains BSP name, then its for specific BSP so append the name of BSP
						fi
					fi
					## write info to the file			
					echo "$README_INDIVIDUAL_FIRST_HALF" > $FileName
					echo "$CVEString" >> $FileName
					echo "$README_INDIVIDUAL_SECOND_HALF" >> $FileName
					ReadMe_Cumulative_String=$(echo "$ReadMe_Cumulative_String" | sed "s/$/\/${FileName}/") ## append file name at end of each line (next line character)
					ReadMe_Cumulative_String=$(echo "$ReadMe_Cumulative_String" | sed '/^\// d' ) ## remove line contains only "/filename" resultant of above command.Find some other suitable command for future 	
					LineNumberOfLastOccurenceOfCVE=$(grep -n 'CVE-' ./../$CUMULATIVE_README_NAME | tail -1 | cut -d: -f1) ## get the line number of last occurence of "CVE-" \
					#keyword assuming that no "CVE-" keyword would be used in other than place for listing CVE
					## append at specified line number
					while read -r string
					do
						((LineNumberOfLastOccurenceOfCVE=LineNumberOfLastOccurenceOfCVE+1)) #we get line number of last CVE occurence so add before using it
						sed -i "${LineNumberOfLastOccurenceOfCVE} i${string}" ./../"$CUMULATIVE_README_NAME"					
					done <<< "$ReadMe_Cumulative_String"
											
					PreviousPackageName=$CurrentPackageName
					PreviousBSPName=$CurrentBSPName
					CVEString=""
					ReadMe_Cumulative_String=""
					FileName="README."
				else
					PreviousPackageName=$CurrentPackageName
					PreviousBSPName=$CurrentBSPName				
				fi
			fi
				
			CVENumber="$(echo $line | awk -F.patch '{print $1}' | cut -f1 -d"_" | awk '{print $NF}' FS=fix-)" ## get the CVE number
			if [ "$CVENumber" == "" ]; then
				echo "PatchedPackagesInfo.txt: Empty Line Found" && exit
			fi
			if [ "$(echo "$CVEString" | grep "$CVENumber")" == "" ]; then ## check if more than once CVE Patch is found 
				if [ "$(echo "$CVENumber" |  awk -FCVE- '{print $1}')" != "" ]; then # there may be some patches for correcting already appplied pacth, in that case extract CVE number only e.g typo-CVE-. "fix keyword is removed in above extraction"	 
					CVENumber="$(echo "$CVENumber" | sed 's/^.*\(CVE-.*\)/\1/g')"					
				fi
				CVEString=$CVEString$CVENumber$'\n' ## append CVE number
				CVEString=$CVEString$URLString$CVENumber$'\n' ## write URL in new line
				if [ -e $ScriptDir/$LOGS_DIR/CveWithPackageName.txt ]; then
					#Format of below line <PackageName> <Version>: <CVE>  : See <DirectoryConatingReadmeFiles>					
					ReadMe_Cumulative_String=$ReadMe_Cumulative_String$(grep -r $CVENumber $ScriptDir/$LOGS_DIR/CveWithPackageName.txt)$StringForCumulativeReadME$2$'\n'
					echo "$ReadMe_Cumulative_String"				
				fi	
			fi
			PreviousCVENumber=$CVENumber			
			PreviousLine=$line
		done < PatchedPackagesInfo.txt
	fi
else
	#delete old Reports
	if [ -d ./$REPORTS_DIR ]; then
	    [ "$(ls -A ./$REPORTS_DIR)" ] && rm ./$REPORTS_DIR/* || echo "No Old Reports Found"
	else
	    mkdir ./$REPORTS_DIR
	fi
	#delete old Logs
	if [ -d ./$LOGS_DIR ]; then
	    [ "$(ls -A ./$LOGS_DIR)" ] && rm ./$LOGS_DIR/* || echo "No Old Logs Found"
	else
	    mkdir ./$LOGS_DIR
	fi
	#Copy CVE logs to Logs folder
	if [ -e reported_cve.txt ]; then
		cp reported_cve.txt ./$LOGS_DIR
	else
		echo "No CVE Log found" && exit
	fi
	if [ -e cve*.html ]; then
		cp cve*.html ./$LOGS_DIR
		FILE_STATUS=1
	else
		echo "No CVE html format Log found"
	fi
	if [ -e cve_check ]; then
		cp cve_check ./$LOGS_DIR
		FILE_STATUS=1
	else
		echo "No CVE_CHECK File found"
	fi
	if [ FILE_STATUS == 0 ]; then ## it means no file about patched and unpatched info exists
		echo "No html or cve_check file found. Aborting.."		
		exit
	fi
	if [ -e YoctoCVEList.txt ]; then 
		cp YoctoCVEList.txt ./$LOGS_DIR
	fi

	##Refine html file
	cd $LOGS_DIR
	TmpFileWithoutTags=""
	if [ -e cve*.html ] && [ "$2" == "html" ]; then
		echo "Filter Html file."
		# get the test between tags of html file
		sed 's/<[^>]*>//g' cve*.html > TmpFileWithoutTags
	else
		cp cve_check TmpFileWithoutTags
	fi
	# Remove all text before first CVE- keyword i.e. first CVE reported 
	sed '/CVE-/,$!d' TmpFileWithoutTags > TmpFileHeaderRemoved
	# set all empty lines with ">" and then uniq to remove consecutive repition of ">" 
	awk '!NF{$0=">"}1' TmpFileHeaderRemoved | uniq > TmpFileWithoutEmptyLines
	# write "<" in new line next to ">".They will be used as starting and ending mark for a CVE information
	sed 's/> \?/>\n</g' TmpFileWithoutEmptyLines > TmpFileWithMarks
	# write "<" at start of file which will be missing
	sed -i '1i<' TmpFileWithMarks
	# Now remove CVE info conatainig either Patched tag or Android Tag
	awk '/</{rec=""; f=1} f{rec = rec $0 ORS} />/{ if (f && (rec !~ "Patched" && rec !~ "Android") ) printf "%s",rec; f=0}' TmpFileWithMarks > Valid_CVE_reported.txt
	rm -f TmpFile*
	cd ..
	
## check for CVE patches present in current MEL release according to Version Number
	echo -n "Looking at Mel Release for Versioned Patched CVE [ "
	cd $NORMAL_RELEASE_DIR
	PackageNameNumber=""
	Counter=0
	Lines=$(wc -l < ./../$LOGS_DIR/reported_cve.txt) 
	while read -r file; do
		if ( echo "$file" | grep -q ' ' ); then # if line contains spaces it means line has Package name and Version Number 
			PackageNameNumber="$(echo "$file")"
		elif [ "$file" == "0" ]; then
			(Counter=Counter)
		elif [ ! -z "$(grep -r "$file" ./../$LOGS_DIR/Valid_CVE_reported.txt)" ]; then #check if that CVE entry is present in refined html file or cve_check
			SearchedOutput="$(grep -r "$file" ./)" 
			if [ ! -z "$(echo $SearchedOutput | grep "$PackageNameNumber")" ]; then ## if searched CVE output has package number then declare patched  
				echo "$file" >>  ./../$LOGS_DIR/TempVersionedPatchedCve.txt
			else
				echo "$file" >> ./../$LOGS_DIR/TempVersionedToBePatchedCve.txt
				echo -n "$PackageNameNumber" >> ../$LOGS_DIR/TmpCveWithPackageName.txt 
				echo -n ": " >> ../$LOGS_DIR/TmpCveWithPackageName.txt               
				echo "$file" >> ../$LOGS_DIR/TmpCveWithPackageName.txt 	
			fi

			if [ ! -z "$(echo $SearchedOutput | grep "updates/update-mel-")" ]; then
				echo "$file" >>  ./../$LOGS_DIR/PatchedInUpdate.txt
			elif [ ! -z "$(echo $SearchedOutput)" ]; then
				echo "$file" >>  ./../$LOGS_DIR/PatchedInOtherLayers.txt
			fi
		fi
		((Counter=Counter+1))
		((Temp=($Counter * 100)))	
		Percentage=$(( $Temp / $Lines ))
		if [ $Percentage -lt 10 ]; then
			echo -ne "$Percentage % ]\b\b\b\b\b"
		else
			echo -ne "$Percentage % ]\b\b\b\b\b\b"
		fi	
	done < ./../$LOGS_DIR/reported_cve.txt
	echo -e "\n"

## Format Generated Logs
	if [ -e ./../$LOGS_DIR/TmpCveWithPackageName.txt ]; then
		sort ./../$LOGS_DIR/TmpCveWithPackageName.txt | uniq > ./../$LOGS_DIR/CveWithPackageName.txt
	fi

	if [ -e ./../$LOGS_DIR/TempVersionedPatchedCve.txt ]; then
		sort -n ./../$LOGS_DIR/TempVersionedPatchedCve.txt | uniq > ./../$LOGS_DIR/VersionedPatchedCve.txt
		cp ./../$LOGS_DIR/VersionedPatchedCve.txt ./../$REPORTS_DIR/
	fi

	if [ -e ./../$LOGS_DIR/PatchedInUpdate.txt ]; then
		sort -n ./../$LOGS_DIR/PatchedInUpdate.txt | uniq > ./../$REPORTS_DIR/PatchedInUpdate.txt
	fi

	if [ -e ./../$LOGS_DIR/PatchedInOtherLayers.txt ]; then
		sort -n ./../$LOGS_DIR/PatchedInOtherLayers.txt | uniq > ./../$REPORTS_DIR/PatchedInOtherLayers.txt
	fi

	if [ -e ./../$LOGS_DIR/TempVersionedToBePatchedCve.txt ]; then
		sort -n ./../$LOGS_DIR/TempVersionedToBePatchedCve.txt | uniq > ./../$LOGS_DIR/VersionedToBePatchedCve.txt
		cp ./../$LOGS_DIR/VersionedToBePatchedCve.txt ./../$REPORTS_DIR/
	fi

## Check User Command arguments,if asked then list new patches of CVE present in latest Yocto Release by comparing with old release we have already checked for patches else just rename
	## "cat ./../$REPORTS_DIR/VersionedToBePatchedCve.txt" for further script comaptibilty
	if [ "$1" ==  "-c" ]; then  
		echo "Looking at Yocto Layer..."
		cd ./../$POKY_RELEASE_DIR/
		#diff -r old new
		diff -r $2 $3 \
		| grep $3 | awk '{print $4}' \
		| grep CVE \
		| while read -r file; do find ./"$3" -name "$file"; done > ./../$LOGS_DIR/YoctoCVEList.txt

		echo "Formatting Logs..."
		cd ./../$LOGS_DIR/

		## Format Yocto CVE list

		#Remove everything before last slash
		sed 's@.*/@@' YoctoCVEList.txt > TempFormattedYoctoCVEList.txt
		#Remove any Package name attached to CVE number
		sed 's/^.*\(CVE-*\)/\1/g' TempFormattedYoctoCVEList.txt > TempFormattedYoctoCVEList_1.txt 
		#Now Get only CVE Number and remove .patch keyword at aend of CVE number
		cut -c-13 TempFormattedYoctoCVEList_1.txt > TempFormattedYoctoCVEList_2.txt
		#sort
		sort -n TempFormattedYoctoCVEList_2.txt > FormattedYoctoCVEList.txt
		## Merge Reported CVE to be patched form cve-check-tool and Yocto Pathced CVE list
		if [ -e ./../$REPORTS_DIR/VersionedToBePatchedCve.txt ]; then
			cat ./../$REPORTS_DIR/VersionedToBePatchedCve.txt FormattedYoctoCVEList.txt > TempMergedList.txt
		else
			cat FormattedYoctoCVEList.txt > TempMergedList.txt
		fi
	else
		echo "No Yocto Layer to be seen for moving patched CVE"
		if [ -e ./../$REPORTS_DIR/VersionedToBePatchedCve.txt ]; then
			cat ./../$REPORTS_DIR/VersionedToBePatchedCve.txt > ../$LOGS_DIR/TempMergedList.txt
		fi
	fi

## look at poky layer for patches of reported CVE against MelReleases.It shall be checked if 
	## user provided only one release of poky.2 releases are considered to be thge work for abu.
	if [ "$1" ==  "-r" ]; then 
		cd ./../$RELEASES_DIR/"$2"
		if [ -e ./../../$LOGS_DIR/VersionedToBePatchedCve.txt ]; then
			echo -n "Looking at Provided Release for already present Patches [ "
			Counter=0
			Lines=$(wc -l < ./../../$LOGS_DIR/VersionedToBePatchedCve.txt) 
			while read -r file; do 
				if [ ! -z "$(grep -r "$file" ./)" ]; then 
					echo "$file" >> ./../../$LOGS_DIR/ReleaseTempPatches.txt	
				fi
				((Counter=Counter+1))
				((Temp=($Counter * 100)))	
				Percentage=$(( $Temp / $Lines ))
				if [ $Percentage -lt 10 ]; then
					echo -ne "$Percentage % ]\b\b\b\b\b"
				else
					echo -ne "$Percentage % ]\b\b\b\b\b\b"
				fi	
			done < ./../../$LOGS_DIR/VersionedToBePatchedCve.txt
			echo -e "\n"
			cp ./../../$LOGS_DIR/ReleaseTempPatches.txt ./../../$REPORTS_DIR/ReleasePatches.txt
		fi
		cd ./../	
	fi

## Remove duplicates from resultant list
	##For future use : cat TempMergedList.txt | sort -n | uniq | tr -s '\n' ' ' | 
	##awk '{ while(++i<=NF) printf (!a[$i]++) ? $i FS : ""; i=split("",a); print ""}' | tr " " "\n" | sed '/^\s*$/d' > MergdedList.txt
	cd ./../$LOGS_DIR/
	if [ -e TempMergedList.txt ]; then
		cat TempMergedList.txt | sort -n | uniq > MergedList.txt
	fi

## Delete Old logs
	if [ -e TempPatchedCve.txt ]; then
		rm -r TempPatchedCve.txt
	fi

	if [ -e TempToBePatchedCve.txt ]; then
		rm -r TempToBePatchedCve.txt
	fi

## check for CVE patches not present in current MEL release
	cd ./../$NORMAL_RELEASE_DIR
	if [ -e ../$LOGS_DIR/MergedList.txt ]; then
		echo -n "Looking at Mel Release for Non-Versioned Patched CVE [ "
		Counter=0
		Lines=$(wc -l < ./../$LOGS_DIR/MergedList.txt) 
		while read -r file; do 
			if [ ! -z "$(grep -r "$file" ./)" ]; then 
				echo "$file" >>  ./../$LOGS_DIR/TempPatchedCve.txt
			else
				echo "$file" >> ./../$LOGS_DIR/TempToBePatchedCve.txt	
			fi
			((Counter=Counter+1))
			((Temp=($Counter * 100)))	
			Percentage=$(( $Temp / $Lines ))
			if [ $Percentage -lt 10 ]; then
				echo -ne "$Percentage % ]\b\b\b\b\b"
			else
				echo -ne "$Percentage % ]\b\b\b\b\b\b"
			fi	
		done < ./../$LOGS_DIR/MergedList.txt
		echo -e "\n"
	fi

## Generating Reports
	echo "Generating Reports..."
	cd ./../$REPORTS_DIR

	if [ -e ./../$LOGS_DIR/TempToBePatchedCve.txt ]; then
		uniq -u ./../$LOGS_DIR/TempToBePatchedCve.txt > ToBePatchedCve.txt
	fi

	if [ -e ./../$LOGS_DIR/TempPatchedCve.txt ]; then
		uniq -u ./../$LOGS_DIR/TempPatchedCve.txt > PatchedCve.txt
	fi

	if [[ -e ./../$LOGS_DIR/FormattedYoctoCVEList.txt && -e VersionedToBePatchedCve.txt ]]; then
		grep -f ./../$LOGS_DIR/FormattedYoctoCVEList.txt VersionedToBePatchedCve.txt | sort -n | uniq > PatchesForCVEPresentInYoctoLayer.txt
		PatchesForCVEPresentInYoctoLayer (){
		wc -l < PatchesForCVEPresentInYoctoLayer.txt
		}
		echo -n "Patches can be found in Yocto Release = "
		echo "$(PatchesForCVEPresentInYoctoLayer)"
		if [ -e ./../$LOGS_DIR/CveWithPackageName.txt ]; then
			while read -r file; do
				SearchedOutput="$(grep $file ./../$LOGS_DIR/CveWithPackageName.txt)"
				if [ ! -z "$SearchedOutput" ]; then			
					echo "$SearchedOutput" >> TmpPatchesForCVEPresentInYoctoLayer.txt
				else
					echo $file >> TmpPatchesForCVEPresentInYoctoLayer.txt
				fi
			done < PatchesForCVEPresentInYoctoLayer.txt
			sort TmpPatchesForCVEPresentInYoctoLayer.txt > PatchesForCVEPresentInYoctoLayer.txt
			rm TmpPatchesForCVEPresentInYoctoLayer.txt	
		fi
	fi

	if [ -e VersionedToBePatchedCve.txt ]; then
		NumberOfCVEToBePatched (){
		wc -l < VersionedToBePatchedCve.txt 
		}
		echo -n "Number of CVE to be patched are = "
		echo "$(NumberOfCVEToBePatched)"
	else
		echo "Number of CVE to be patched are = 0"
	fi

	if [[ -e PatchedCve.txt && -e VersionedToBePatchedCve.txt ]]; then
	#	grep -f PatchedCve.txt VersionedToBePatchedCve.txt | sort -n | uniq > PatchesForCVEPresentInMelRelease.txt
		NumberOfPatchesInMelRelease (){
		wc -l < PatchedCve.txt
		}
		echo -n "Patches can be found in Mel Release = "
		echo "$(NumberOfPatchesInMelRelease)"
	fi

	if [[ -e ToBePatchedCve.txt && -e ./../$LOGS_DIR/FormattedYoctoCVEList.txt ]]; then
		grep -f ./../$LOGS_DIR/FormattedYoctoCVEList.txt ToBePatchedCve.txt > PatchesToBeMovedFromYocto.txt
		NumberOfPatchesToBeMovedFromYocto (){
		wc -l < PatchesToBeMovedFromYocto.txt
		}
		echo -n "Patches to be moved from Yocto = "
		echo "$(NumberOfPatchesToBeMovedFromYocto)"
		if [ -e ./../$LOGS_DIR/CveWithPackageName.txt ]; then
			while read -r file; do
				SearchedOutput="$(grep $file ./../$LOGS_DIR/CveWithPackageName.txt)"
				if [ ! -z "$SearchedOutput" ]; then			
					echo "$SearchedOutput" >> TmpPatchesToBeMovedFromYocto.txt
				else
					echo $file >> TmpPatchesToBeMovedFromYocto.txt
				fi
			done < PatchesToBeMovedFromYocto.txt
			sort TmpPatchesToBeMovedFromYocto.txt > PatchesToBeMovedFromYocto.txt
			rm TmpPatchesToBeMovedFromYocto.txt
		fi	
	fi

	if [[ -e ReleasePatches.txt && -e VersionedToBePatchedCve.txt && -e PatchedCve.txt ]]; then
		grep -v -f <(sort PatchedCve.txt) <(sort VersionedToBePatchedCve.txt) | uniq > ./../$LOGS_DIR/Temp.txt
		grep -f <(sort ReleasePatches.txt) ./../$LOGS_DIR/Temp.txt > PatchesForCVEPresentInProvidedRelease.txt
		NumberOfPatchesInprovidedRelease (){
		wc -l < PatchesForCVEPresentInProvidedRelease.txt
		}
		echo -n "Patches can be found in Provided Release = "
		echo "$(NumberOfPatchesInprovidedRelease)"
		if [ -e ./../$LOGS_DIR/CveWithPackageName.txt ]; then
			while read -r file; do
		                SearchedOutput="$(grep $file ./../$LOGS_DIR/CveWithPackageName.txt)"
				if [ ! -z "$SearchedOutput" ]; then			
					echo "$SearchedOutput" >> TmpPatchesForCVEPresentInProvidedRelease.txt
				else
					echo $file >> TmpPatchesForCVEPresentInProvidedRelease.txt
				fi	
			done < PatchesForCVEPresentInProvidedRelease.txt
			sort TmpPatchesForCVEPresentInProvidedRelease.txt > PatchesForCVEPresentInProvidedRelease.txt
			rm TmpPatchesForCVEPresentInProvidedRelease.txt
		fi	
	fi
	if [ -e ./../$LOGS_DIR/CveWithPackageName.txt ]; then
		#list CVE with pacakge name
		if [ -e  PatchedInOtherLayers.txt  ]; then 		
			while read -r file; do
				grep $file ./../$LOGS_DIR/CveWithPackageName.txt >> TmpPatchedInOtherLayers.txt
			done < PatchedInOtherLayers.txt
			sort TmpPatchedInOtherLayers.txt > PatchedInOtherLayers.txt
			rm TmpPatchedInOtherLayers.txt
		fi
		if [ -e  PatchedInUpdate.txt  ]; then 
			while read -r file; do
				grep $file ./../$LOGS_DIR/CveWithPackageName.txt >> TmpPatchedInUpdate.txt
			done < PatchedInUpdate.txt
			sort TmpPatchedInUpdate.txt > PatchedInUpdate.txt
			rm TmpPatchedInUpdate.txt
		fi
		
		cp ./../$LOGS_DIR/CveWithPackageName.txt VersionedToBePatchedCve.txt
	fi
	if [ -e ToBePatchedCve.txt ]; then
		rm ToBePatchedCve.txt # remove it.Not needed to show user	
	fi
fi
